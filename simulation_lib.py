import os, ast
import numpy as np


# py SRIM:
from srim import TRIM, Ion, Layer, Target, Element, Material
from srim.srim import TRIMSettings
from srim.output import Results, SRResults, Range

from aux_functions import *

def calculate_gas_density(Temp,MMolar,Pressure=1,Rgas = 83.144626):
    '''
    returns gas density in g/cm3
    EXAMPLE:

    Temp = 18 # °C
    MMolar = 16.04 # g/mol
    Rgas = 0.000083144626 # cm3⋅bar⋅K−1⋅mol−1
    Pressure = 1.1 #bar 
    '''

    # Rgas = 83.144626 # cm3⋅bar⋅K−1⋅mol−1 
    return (Pressure*MMolar)/((Temp+273.15)*Rgas)

def create_methane_target(gas_density, depth, angle=0):
    """
        Create a methane target for simulation with specified properties.

        Parameters:
        - gas_density (float): The density of the methane gas (in appropriate units).
        - depth (float): The thickness of the methane layer (in appropriate units).
        - angle (float, optional): The angle for the layer phase, default is 0.

        UPDATE:
        -     # Update the material properties of the elements in the methane layer:
                element["E_d"], element["lattice"], element["surface"]
        -     # These values should be extracted from the TRIM.IN file generated by manual configuration of TRIM simulation
        
            [ Individual target atom displacement energies (eV)
              Individual target atom lattice binding energies (eV)
              Individual target atom surface binding energies (eV) ]

        Returns:
        - target: A Target object representing the methane layer.
    """
    
    # Define the chemical formula for methane
    chemical_formula = 'CH4'

    # Create a layer of methane with the specified density, width (depth), and phase angle
    methane_layer = Layer.from_formula(chemical_formula, density=gas_density, width=depth, phase=angle, name='CH4 - pure methane')

    # Update the material properties of the elements in the methane layer
    # These values should be extracted from the TRIM.IN file generated by manual configuration of TRIM simulation

    # Define properties for Carbon (C) element in the methane layer
    carbon = methane_layer.elements[Element(6)]  # Element(6) corresponds to Carbon
    carbon["E_d"], carbon["lattice"], carbon["surface"] = 28, 3, 7.41  # Update displacement energy, lattice parameter, and surface energy

    # Define properties for Hydrogen (H) element in the methane layer
    hydrogen = methane_layer.elements[Element(1)]  # Element(1) corresponds to Hydrogen
    hydrogen["E_d"], hydrogen["lattice"], hydrogen["surface"] = 10, 3, 2  # Update displacement energy, lattice parameter, and surface energy

    # Optionally print the density and name of the methane layer for verification
    # print(methane_layer.density, methane_layer.name)

    # Create a target object containing the methane layer for the simulation
    target = Target([methane_layer])
    
    return target, methane_layer.name  # Return the created target and layer name

def run_simulation(srim_path,index, new_input, gas_density, depth, save_all=True, overull_nb_ions = 1):
    
    """
    Run a SRIM simulation with a given ion and methane target setup.

    Parameters:
    -----------
    srim_path : str
        The file path to the SRIM executable.
    index : int
        An identifier or index for the simulation (based on input list).
    new_input : str
        A string representing the ion parameters and additional simulation setup, 
        typically formatted as a list of values: 
        ['Ion', 'Z1', 'M1', 'Energy(keV)', 'Yield', 'Angle', 'Number', 'BraggCorr', 'AutoSaveNumber'].
    gas_density : float
        The density of the target later (default: methane) in g/cm³.
    depth : float
        The depth of the target in angstroms.
    save_all : bool, optional (default=True)
        If True, save all files generated during the simulation in OUTPUTS/$Zi$Ion/ folder.
    overull_nb_ions : int, optional (default=1)
        Overrides the number of ions to simulate if set to a value other than 1.

    Returns:
    --------
    None

    Notes:
    ------
    - To accommodate different input shapes, adjust the unpacking line as follows:
      Replace:
        [isotope, Zi, Ai, Ei, Yi, ang, nb, Brgg, asnb] = ast.literal_eval(new_input)
      With the appropriate unpacking format based on the structure of your input string. 
      For example, if your input string omits certain fields like `Yield` or `AutoSaveNumber`, 
      you can remove those elements from the list and the function will still work if the mandatory 
      fields (isotope, Zi, Ei, and nb) are present.

    Example:
    --------
    index=i
    new_input = input_list[i]
    new_input = "['O', 8, 16, 500, 1, 0, 100, 1, 0]"    # for Oxygen
    ...

    run_simulation(srim_path, index, new_input, gas_density, depth)
    """
    
    #if input has different format then :
    # ['Ion', 'Z1', 'M1', 'Energy(keV)', 'Yield', 'Angle', 'Number', 'BraggCorr', 'AutoSaveNumber']
    # edit :
    [isotope, Zi, Ai, Ei, Yi, ang, nb, Brgg, asnb] =  ast.literal_eval(new_input)
    if(overull_nb_ions!=1): nb = int(overull_nb_ions)

    # # Verify input:
    # print(Zi,Ai,Ei,Yi,ang, nb, Brgg, asnb) 

    # Construct Ion :: ATTENTION: isotope must be the abreviation : e.g. Lanthanum = "La"
    ion = Ion(isotope, energy=int(Ei)) # , mass=float(Ai)

    #construct target layer
    target, target_name = create_methane_target(gas_density, depth)

    trim_settings = TRIMSettings()

    # it might me necessary to include new lines according to your needs and input files... 
    trim_settings._settings['description'] = str(isotope + " in " + target_name)
    trim_settings._settings['plot_xmax'] = depth
    trim_settings._settings['ranges'] = 1
    trim_settings._settings['random_seed'] = 0
    trim_settings._settings['bragg_correction'] = Brgg # recommend getting the value from SRIM default value for predefined compound (by hand)
    trim_settings._settings['angle_ions'] = ang
    # trim_settings._settings['autosave'] =  0 # not configured correctly

    # Initialize a TRIM calculation with given target and ion 
    trim_simulation = TRIM(ion=ion,target=target,number_ions=nb, calculation=1, **trim_settings._settings )
    
    print(trim_settings._settings['description'])

    # Specify the directory of SRIM.exe
    results = trim_simulation.run(srim_path)#,newTRIM_IN=False)
    # simulation_results = Results(srim_path) #this doesnt seem necessary

    if(save_all): move_files(Zi,isotope)
            
    return 


def start_simulation(srim_path, input_list_path,gas_density,layer_width, save_all=True):  # default for methane

    settings_list = ['description', 'reminders', 'autosave', 'plot_mode', 'plot_xmin', 'plot_xmax', 
                     '\nranges', 'backscattered', 'transmit', 'sputtered', 'collisions', 'exyz', 
                     '\nangle_ions', 'bragg_correction', 'random_seed', 'version']
    
    print("The following settings can be configured in run_simulation() function:\n", settings_list)

    print("\nGas density: ", gas_density)

    with open(input_list_path, 'r') as file:
        input_list = file.readlines()
    
    isotope_data = []
    isotope_list = []
    for line in input_list[1:]:
        isotope_data.append(ast.literal_eval(line))
        # Remove brackets and split by commas, then strip whitespace
        isotope_list.append(isotope_data[-1][0])

    for index, isotope in enumerate(isotope_list):
        print("\nStarting simulation for isotope   >>> %s <<<   ..." %isotope)
        print("     preparing TRIM.IN input file ...")
        
        run_simulation(srim_path, index, input_list[index+1], gas_density=gas_density, depth=layer_width, save_all=save_all)
    
    print("Simulation complete")
    return 


def start_simulation_uncertainty(srim_path, input_list_path, gas_density,layer_width, save_all=False):  # default for methane

    rCG, average_range, XRratio = [],[],[]


    with open(input_list_path, 'r') as file:
        input_list = file.readlines()
    
    isotope_data = []
    isotope_list = []
    for line in input_list[1:]:
        isotope_data.append(ast.literal_eval(line))
        # Remove brackets and split by commas, then strip whitespace
        isotope_list.append(isotope_data[-1][0])

    for index, isotope in enumerate(isotope_list):
        print("\nStarting simulation for isotope   >>> %s <<<   ..." %isotope)
        print("     editing input file ...")
        
        run_simulation(srim_path, index, input_list[index+1], gas_density=gas_density, depth=layer_width, save_all=save_all, overull_nb_ions = 30)
        
        ranges_output = read_range(srim_path)
        # print(ranges_output)
        depths, ioniz_by_ions, ioniz_by_recoils = read_ioniz(srim_path)
        
        depths=np.array(depths)
        ioniz_by_ions=np.array(ioniz_by_ions)
        ioniz_by_recoils=np.array(ioniz_by_recoils)

        '''
        # number of electrons is proportional to deposited energy 
            # Né = E(r)/W
        # the center of gravity of the electron cloud is given by Sum(r * E(r)/ W ) / Sum( E(r) / W ) => Sum( r*E(r) )/ Sum(E(r))
        '''
        rCG.append(sum(depths*(ioniz_by_ions+ioniz_by_recoils))/sum(ioniz_by_ions+ioniz_by_recoils))
        # print(ranges_output["Ion Average Range"])
        average_range.append(float(ranges_output["Ion Average Range"]))
        XRratio.append(rCG[-1]/average_range[-1])
    


    print("   done")

    print("Simulation complete")


    return rCG, average_range, XRratio

def simulation_analysis():
    rCG = []
    urCG = []
    ion_ranges = []
    u_ion_ranges = []
